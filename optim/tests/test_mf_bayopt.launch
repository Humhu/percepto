<launch>

    <node pkg="optim" type="test_mf_problem_node.py" name="test_problem" output="screen">
        <rosparam>
            num_fidelities: 3
            noise: 0.1
            gamma: 0.25
            query_time: 1.0
        </rosparam>
    </node>

    <node pkg="optim" type="MultiFidelityBayesianOptimizer.py" name="test_optimizer" output="screen" required="true" launch-prefix="xterm -hold -e pdb">
        <rosparam>
            output_path: /tmp/mf_out.pkl
            run_on_start: true
            interface:
                topic: test_problem/get_critique
                verbose: true

            exploration_rate_alpha: 0.2
            exploration_rate_gamma: 2.0

            reward_model:
                type: gaussian_process
                num_fidelities: 3
                bias: 0.1
                batch_retries: 9
                refine_ll_delta: -inf
                refine_retries: 3
                verbose: true

            auxiliary_optimizer:
                type: bfgs
                mode: max
                num_restarts: 3
                ftol: 1e-6
                gtol: 1e-6
                maxiter: 500

            initialization:
                num_samples: 10
                min_variation: 1.0
                method: uniform

            convergence:
                max_time: 360
                x_tol: 0

            dim: 2
            lower_bounds: -2
            upper_bounds: 2
            fidelity_gammas: [0.1, 0.1]
            fidelity_costs: [1, 2, 3]
        </rosparam>
    </node>

</launch>